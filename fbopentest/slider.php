<?php

/******BEGIN LICENSE BLOCK*******
* 
* Common Public Attribution License Version 1.0.
*
* The contents of this file are subject to the Common Public Attribution 
* License Version 1.0 (the "License") you may not use this file except in 
* compliance with the License. You may obtain a copy of the License at
* http://developers.facebook.com/fbopen/cpal.html. The License is based 
* on the Mozilla Public License Version 1.1 but Sections 14 and 15 have 
* been added to cover use of software over a computer network and provide 
* for limited attribution for the Original Developer. In addition, Exhibit A 
* has been modified to be consistent with Exhibit B.
* Software distributed under the License is distributed on an "AS IS" basis, 
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
* for the specific language governing rights and limitations under the License.
* The Original Code is Facebook Open Platform.
* The Original Developer is the Initial Developer.
* The Initial Developer of the Original Code is Facebook, Inc.  All portions 
* of the code written by Facebook, Inc are 
* Copyright 2006-2008 Facebook, Inc. All Rights Reserved.
*
*
********END LICENSE BLOCK*********/


// FBOPEN:NOTE - script based on demo script at :
// http://wiki.developers.facebook.com/index.php/FBJS/Examples/Dialogs

?>

<br/>

<script>
var slider_handle = '<span style="text-align:center;padding:0 10px;">| | |</span>';

function slider(obj, min, max, size, input, initial) {
  this.container = document.createElement('div');
  this.container.setStyle('width', size + 'px');
  this.container.setClassName('slider');
  this.obj = document.createElement('div');
  this.handle = document.createElement('span');
  this.handle.setInnerXHTML(slider_handle);
  obj.appendChild(this.container);
  this.container.appendChild(this.obj);
  this.obj.appendChild(this.handle);
  this.mousedown = 0;
  this.lastPos = 0;
  this.min = min;
  this.max = max;
  this.input = input;
  this.width = parseInt(this.obj.getScrollWidth()) - parseInt(this.handle.getScrollWidth()) - 8;

  document.getRootElement().addEventListener('mouseup', this.mouseup.bind(this))
    .addEventListener('mousemove', this.mousemove.bind(this));
  this.input.addEventListener('keydown', this.change.bind(this));
  this.obj.addEventListener('mousedown', this.mdown.bind(this));
  var num = parseInt(initial);
  if (num > this.max) num = this.max;
  if (num < this.min) num = this.min;
  var move = parseInt(((num - this.min) / (this.max - this.min)) * (this.width));
  this.handle.setStyle('marginLeft', move + 'px');
  this.input.setValue(num);
}
slider.prototype.mousemove = function(e) {
  if (this.mousedown != 0) {
    var move = e.pageX - this.lastPos;
    this.lastPos = e.pageX;
    if (this.handle.getStyle('marginLeft')) move += parseInt(this.handle.getStyle('marginLeft'));
    if (move > this.width) move = this.width;
    if (move < 0) move = 0;
    this.handle.setStyle('marginLeft', move + 'px');
    this.input.setValue(parseInt(((move / this.width) * (this.max - this.min)) + this.min));
    e.preventDefault();
  }
};

slider.prototype.mouseup = function(e) {
  this.mousedown = 0;
};
slider.prototype.mdown = function(e) {
  this.mousedown = 1;
  this.lastPos = e.pageX;
  var move = parseInt(this.lastPos - this.obj.getAbsoluteLeft() - (this.handle.getScrollWidth() / 2));
  if (move > this.width) move = this.width;
  if (move < 0) move = 0;
  this.handle.setStyle('marginLeft', move + 'px');
  this.input.setValue(parseInt(((move / this.width) * (this.max - this.min)) + this.min));
  e.preventDefault();
};

// update slider on input box change
slider.prototype.change = function(e) {
  // don't intercept backspace and arrow keys
if ((e.keyCode == 8) || (e.keyCode == 37) || (e.keyCode == 39)) return true;
var num = 0;
if (this.input.getValue()) num = parseInt(this.input.getValue() + String.fromCharCode(e.keyCode));
else num = parseInt(String.fromCharCode(e.keyCode));
if (num > this.max) num = this.max;
if (num < this.min) num = this.min;
var move = parseInt(((num - this.min) / (this.max - this.min)) * (this.width));
this.handle.setStyle('marginLeft', move + 'px');
this.input.setValue(num);
return false;
};

</script>

<!-- FBOPEN:NOTE : Style needs to be rendered inline, because we don't cache CSS -->
<style>
div.slider { border: 1px solid #ccc; background-color: #f5f5f5; padding: 3px; margin: 4px; } div.slider div { background-color: #fff; border: 1px solid #ccc; padding:3px; font-size: 6px; padding-bottom: 4px; margin: 4px; } div.slider div span { background-color:#ddd; border: 1px solid #ccc; color: #999; padding-bottom: 1px; } div.slider div span:hover { cursor: pointer; }
</style>

<input name="count" id="count">
<div id="count_slider"></div>
<script>new slider(document.getElementById('count_slider'), 0, 10, 300, document.getElementById('count'), 5);</script>

<br/>
